// Code generated by counterfeiter. DO NOT EDIT.
package secretsfakes

import (
	"context"
	"sync"

	gax "github.com/googleapis/gax-go/v2"
	"github.com/telia-oss/gcp-env/internal/secrets"
	secretmanager "google.golang.org/genproto/googleapis/cloud/secretmanager/v1"
)

type FakeGoogleSecretsManagerAPI struct {
	AccessSecretVersionStub        func(context.Context, *secretmanager.AccessSecretVersionRequest, ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error)
	accessSecretVersionMutex       sync.RWMutex
	accessSecretVersionArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanager.AccessSecretVersionRequest
		arg3 []gax.CallOption
	}
	accessSecretVersionReturns struct {
		result1 *secretmanager.AccessSecretVersionResponse
		result2 error
	}
	accessSecretVersionReturnsOnCall map[int]struct {
		result1 *secretmanager.AccessSecretVersionResponse
		result2 error
	}
	GetSecretStub        func(context.Context, *secretmanager.GetSecretRequest, ...gax.CallOption) (*secretmanager.Secret, error)
	getSecretMutex       sync.RWMutex
	getSecretArgsForCall []struct {
		arg1 context.Context
		arg2 *secretmanager.GetSecretRequest
		arg3 []gax.CallOption
	}
	getSecretReturns struct {
		result1 *secretmanager.Secret
		result2 error
	}
	getSecretReturnsOnCall map[int]struct {
		result1 *secretmanager.Secret
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersion(arg1 context.Context, arg2 *secretmanager.AccessSecretVersionRequest, arg3 ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error) {
	fake.accessSecretVersionMutex.Lock()
	ret, specificReturn := fake.accessSecretVersionReturnsOnCall[len(fake.accessSecretVersionArgsForCall)]
	fake.accessSecretVersionArgsForCall = append(fake.accessSecretVersionArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanager.AccessSecretVersionRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.AccessSecretVersionStub
	fakeReturns := fake.accessSecretVersionReturns
	fake.recordInvocation("AccessSecretVersion", []interface{}{arg1, arg2, arg3})
	fake.accessSecretVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersionCallCount() int {
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	return len(fake.accessSecretVersionArgsForCall)
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersionCalls(stub func(context.Context, *secretmanager.AccessSecretVersionRequest, ...gax.CallOption) (*secretmanager.AccessSecretVersionResponse, error)) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = stub
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersionArgsForCall(i int) (context.Context, *secretmanager.AccessSecretVersionRequest, []gax.CallOption) {
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	argsForCall := fake.accessSecretVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersionReturns(result1 *secretmanager.AccessSecretVersionResponse, result2 error) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = nil
	fake.accessSecretVersionReturns = struct {
		result1 *secretmanager.AccessSecretVersionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGoogleSecretsManagerAPI) AccessSecretVersionReturnsOnCall(i int, result1 *secretmanager.AccessSecretVersionResponse, result2 error) {
	fake.accessSecretVersionMutex.Lock()
	defer fake.accessSecretVersionMutex.Unlock()
	fake.AccessSecretVersionStub = nil
	if fake.accessSecretVersionReturnsOnCall == nil {
		fake.accessSecretVersionReturnsOnCall = make(map[int]struct {
			result1 *secretmanager.AccessSecretVersionResponse
			result2 error
		})
	}
	fake.accessSecretVersionReturnsOnCall[i] = struct {
		result1 *secretmanager.AccessSecretVersionResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecret(arg1 context.Context, arg2 *secretmanager.GetSecretRequest, arg3 ...gax.CallOption) (*secretmanager.Secret, error) {
	fake.getSecretMutex.Lock()
	ret, specificReturn := fake.getSecretReturnsOnCall[len(fake.getSecretArgsForCall)]
	fake.getSecretArgsForCall = append(fake.getSecretArgsForCall, struct {
		arg1 context.Context
		arg2 *secretmanager.GetSecretRequest
		arg3 []gax.CallOption
	}{arg1, arg2, arg3})
	stub := fake.GetSecretStub
	fakeReturns := fake.getSecretReturns
	fake.recordInvocation("GetSecret", []interface{}{arg1, arg2, arg3})
	fake.getSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecretCallCount() int {
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	return len(fake.getSecretArgsForCall)
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecretCalls(stub func(context.Context, *secretmanager.GetSecretRequest, ...gax.CallOption) (*secretmanager.Secret, error)) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = stub
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecretArgsForCall(i int) (context.Context, *secretmanager.GetSecretRequest, []gax.CallOption) {
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	argsForCall := fake.getSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecretReturns(result1 *secretmanager.Secret, result2 error) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = nil
	fake.getSecretReturns = struct {
		result1 *secretmanager.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeGoogleSecretsManagerAPI) GetSecretReturnsOnCall(i int, result1 *secretmanager.Secret, result2 error) {
	fake.getSecretMutex.Lock()
	defer fake.getSecretMutex.Unlock()
	fake.GetSecretStub = nil
	if fake.getSecretReturnsOnCall == nil {
		fake.getSecretReturnsOnCall = make(map[int]struct {
			result1 *secretmanager.Secret
			result2 error
		})
	}
	fake.getSecretReturnsOnCall[i] = struct {
		result1 *secretmanager.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeGoogleSecretsManagerAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.accessSecretVersionMutex.RLock()
	defer fake.accessSecretVersionMutex.RUnlock()
	fake.getSecretMutex.RLock()
	defer fake.getSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGoogleSecretsManagerAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ secrets.GoogleSecretsManagerAPI = new(FakeGoogleSecretsManagerAPI)
